{"version":3,"sources":["item.jsx","items.jsx","inputField.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Item","_this","this","react_default","a","createElement","Fragment","style","fontSize","onClick","props","onDone","id","className","onDelete","text","Component","Items","items","map","item","marginLeft","key","src_item","InputField","count","onSubmit","onEnter","type","value","todo","onChange","onModify","src_items","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","heading","today","Date","handleDone","bind","assertThisInitialized","handleDelete","handleChange","handleSubmit","li","document","getElementById","textDecorationLine","textDecorationColor","index","_this$state","filter","setState","event","target","preventDefault","_this$state2","length","new_item","push","console","log","toString","inputField","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAsCeA,mLA7BF,IAAAC,EAAAC,KACL,OACIC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,UACIE,MAAO,CAAEC,SAAU,QACnBC,QAAS,kBAAMR,EAAKS,MAAMC,OAAOV,EAAKS,MAAME,KAC5CC,UAAU,8BAET,IALL,QAcAV,EAAAC,EAAAC,cAAA,UACIE,MAAO,CAAEC,SAAU,QACnBC,QAAS,kBAAMR,EAAKS,MAAMI,SAASb,EAAKS,MAAME,KAC9CC,UAAU,6BAHd,UAOCX,KAAKQ,MAAMK,aAhCTC,aCqBJC,mLAlBN,IAAAhB,EAAAC,KACGgB,EAAUhB,KAAKQ,MAAfQ,MACR,OACIf,EAAAC,EAAAC,cAAA,UACGa,EAAMC,IAAI,SAAAC,GAAI,OACbjB,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAAEc,WAAY,SAAWC,IAAKF,EAAKR,GAAIA,GAAIQ,EAAKR,IACzDT,EAAAC,EAAAC,cAACkB,EAAD,CACAZ,OAAQV,EAAKS,MAAMC,OACnBG,SAAUb,EAAKS,MAAMI,SACrBF,GAAIQ,EAAKR,GACTG,KAAMK,EAAKL,kBAXLC,aCgCLQ,mLA3BX,OACErB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBACWF,EAAAC,EAAAC,cAAA,YAAOH,KAAKQ,MAAMe,OAD7B,sBAC8D,KACvD,IACPtB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAMqB,SAAUxB,KAAKQ,MAAMiB,SACzBxB,EAAAC,EAAAC,cAAA,oCADF,QAEEF,EAAAC,EAAAC,cAAA,SACEO,GAAG,OACHgB,KAAK,OACLC,MAAO3B,KAAKQ,MAAMoB,KAClBC,SAAU7B,KAAKQ,MAAMsB,WANzB,OASE7B,EAAAC,EAAAC,cAAA,SAAOO,GAAG,SAASgB,KAAK,SAASC,MAAM,cAEzC1B,EAAAC,EAAAC,cAAC4B,EAAD,CACOf,MAAQhB,KAAKQ,MAAMQ,MACnBP,OAAQT,KAAKQ,MAAMC,OACnBG,SAAUZ,KAAKQ,MAAMI,mBAxBXE,aCkERkB,cApEf,SAAAA,EAAYxB,GAAO,IAAAT,EAAA,OAAAkC,OAAAC,EAAA,EAAAD,CAAAjC,KAAAgC,IACjBjC,EAAAkC,OAAAE,EAAA,EAAAF,CAAAjC,KAAAiC,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAArC,KAAMQ,KACD8B,MAAQ,CACXV,KAAM,GACNL,MAAO,EACPgB,QAAS,gCACTC,MAAOC,OACPzB,MAAM,IAERjB,EAAK2C,WAAa3C,EAAK2C,WAAWC,KAAhBV,OAAAW,EAAA,EAAAX,CAAAlC,IAClBA,EAAK8C,aAAe9C,EAAK8C,aAAaF,KAAlBV,OAAAW,EAAA,EAAAX,CAAAlC,IACpBA,EAAK+C,aAAe/C,EAAK+C,aAAaH,KAAlBV,OAAAW,EAAA,EAAAX,CAAAlC,IACpBA,EAAKgD,aAAehD,EAAKgD,aAAaJ,KAAlBV,OAAAW,EAAA,EAAAX,CAAAlC,IAZHA,0EAeRW,GACT,IAAIsC,EAAKC,SAASC,eAAexC,GACjCsC,EAAG3C,MAAM8C,mBAAqB,eAC9BH,EAAG3C,MAAM+C,oBAAsB,2CAGpBC,GAAO,IAAAC,EAIKtD,KAAKsC,MAAtBf,EAJY+B,EAIZ/B,MAAOP,EAJKsC,EAILtC,MACbA,EAAQA,EAAMuC,OAJd,SAAiBrC,GACf,OAAOA,EAAKR,KAAO2C,IAIrBrD,KAAKwD,SAAS,CAAExC,UAChBhB,KAAKwD,SAAS,CAAEjC,MAAOA,EAAQ,yCAGpBkC,GACXzD,KAAKwD,SAAS,CAAE5B,KAAM6B,EAAMC,OAAO/B,6CAGxB8B,GACXA,EAAME,iBADY,IAAAC,EAGW5D,KAAKsC,MAA5Bf,EAHYqC,EAGZrC,MAAOP,EAHK4C,EAGL5C,MAAOY,EAHFgC,EAGEhC,KACpB,GAAKA,EAAKiC,OAAV,CAGA,IAAMC,EAAW,CAAEjD,KAAMe,EAAMlB,GAAIa,GACnCP,EAAM+C,KAAKD,GAEX9D,KAAKwD,SAAS,CAAEjC,MAAOA,EAAQ,IAC/BvB,KAAKwD,SAAS,CAAExC,UAChBhB,KAAKwD,SAAS,CAAE5B,KAAM,KACvBoC,QAAQC,IAAI,SAAU1C,EAAOP,EAAOY,qCAIjC,OACE3B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKH,KAAKsC,MAAMC,SACZtC,EAAAC,EAAAC,cAAA,wBAAgBH,KAAKsC,MAAME,MAAM0B,YACjCjE,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAACgE,EAAD,CAAYvC,KAAO5B,KAAKsC,MAAMV,KAAML,MAAOvB,KAAKsC,MAAMf,MAC1CO,SAAU9B,KAAK8C,aACfrB,QAASzB,KAAK+C,aACdtC,OAAQT,KAAK0C,WACb9B,SAAUZ,KAAK6C,aACf7B,MAAOhB,KAAKsC,MAAMtB,gBA/DtBF,aCUEsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOzE,EAAAC,EAAAC,cAACwE,EAAD,MAAQ1B,SAASC,eAAe,SD0H1C,kBAAmB0B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8f008ead.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nclass Item extends Component {\r\n    /*constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: 0,\r\n            text: \"\"\r\n        };\r\n    }*/\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <button\r\n                    style={{ fontSize: \"10px\" }}\r\n                    onClick={() => this.props.onDone(this.props.id)}\r\n                    className=\"btn btn-success btn-sm m-2\"\r\n                >\r\n                    {\" \"}\r\n                    Done\r\n                    {/*<img\r\n                    src=\"https://images.emojiterra.com/twitter/v11/512px/2705.png\"\r\n                    height=\"12px\"\r\n                    width=\"12px\"\r\n                    alt=\"check\"\r\n                    />*/}\r\n                </button>\r\n                <button\r\n                    style={{ fontSize: \"10px\" }}\r\n                    onClick={() => this.props.onDelete(this.props.id)}\r\n                    className=\"btn btn-danger btn-sm m-2\"\r\n                >\r\n                    Delete\r\n                </button>\r\n                {this.props.text}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default Item;","import React, { Component } from \"react\";\r\nimport Item from \"./item\";\r\n\r\nclass Items extends Component {\r\nrender() {\r\n    const { items } = this.props;\r\n    return (\r\n        <ul>\r\n          {items.map(item => (\r\n            <li style={{ marginLeft: \"100px\" }} key={item.id} id={item.id}>\r\n              <Item\r\n              onDone={this.props.onDone}\r\n              onDelete={this.props.onDelete}\r\n              id={item.id}\r\n              text={item.text}\r\n            />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n    );\r\n}\r\n}\r\nexport default Items;","//import React from 'react';\r\nimport React, { Component } from \"react\";\r\nimport Items from \"./items\";\r\n\r\n//const InputBox =() => {\r\nclass InputField extends Component {\r\n \r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          You have <span>{this.props.count}</span> Task(s) for today:{\" \"}\r\n        </div>{\" \"}\r\n        <br />\r\n        <br />\r\n        <form onSubmit={this.props.onEnter}>\r\n          <label>Enter a task here :</label> &nbsp;\r\n          <input\r\n            id=\"todo\"\r\n            type=\"text\"\r\n            value={this.props.todo}\r\n            onChange={this.props.onModify}\r\n          />\r\n          &nbsp;\r\n          <input id=\"submit\" type=\"submit\" value=\"Add Task\" />\r\n        </form> \r\n        <Items \r\n               items ={this.props.items}\r\n               onDone={this.props.onDone}\r\n               onDelete={this.props.onDelete}\r\n        />\r\n      </div>      \r\n    );\r\n  }  \r\n}\r\nexport default InputField;","import React, { Component } from \"react\";\r\nimport InputField from \"./inputField\";\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      todo: '',\r\n      count: 0,\r\n      heading: \"ToDo List: Enter a task below\",\r\n      today: Date(),\r\n      items:[]\r\n    };\r\n    this.handleDone = this.handleDone.bind(this);\r\n    this.handleDelete = this.handleDelete.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleDone(id) {\r\n    let li = document.getElementById(id);\r\n    li.style.textDecorationLine = \"line-through\";\r\n    li.style.textDecorationColor = \"red\";\r\n  }\r\n//*******************************\r\n  handleDelete(index) {\r\n    function deleted(item) {\r\n      return item.id !== index;\r\n    }\r\n    let { count, items } = this.state;\r\n    items = items.filter(deleted);\r\n    this.setState({ items });\r\n    this.setState({ count: count - 1 });\r\n  }\r\n  //******************************\r\n  handleChange(event) {\r\n    this.setState({ todo: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    let { count, items, todo } = this.state;\r\n    if (!todo.length) {\r\n      return;\r\n    }\r\n    const new_item = { text: todo, id: count };\r\n    items.push(new_item);\r\n\r\n    this.setState({ count: count + 1 });\r\n    this.setState({ items });\r\n    this.setState({ todo: \"\" });\r\n   console.log(\"Submit\", count, items, todo); \r\n  }\r\n\r\n  render () {\r\n      return (\r\n        <div>\r\n          <h1>{this.state.heading}</h1>\r\n              <span>Today is {this.state.today.toString()}</span>\r\n              <br />\r\n          <InputField todo ={this.state.todo} count={this.state.count}\r\n                      onModify={this.handleChange}\r\n                      onEnter={this.handleSubmit}\r\n                      onDone={this.handleDone}\r\n                      onDelete={this.handleDelete}\r\n                      items={this.state.items}\r\n          />\r\n        </div>\r\n      );\r\n\r\n  }}\r\n  export default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}